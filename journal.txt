Set Up Auth 
---------------
Part 1: https://medium.com/@christine_tran/part-1-create-react-app-rails-api-authentication-with-jwt-tokens-and-redux-e14c7e788989 
    - Knock Gem: Knock is an authentication solution for Rails API-only application based on JSON Web Tokens.
Part 2: https://medium.com/@christine_tran/part-2-create-react-app-rails-api-authentication-with-jwt-tokens-and-redux-bf3009f2abcd

Not enough code along, refrence; might get lost aong the way. Need to make sure I can find a source that can take me through start to finish. Will keep looking.. 
Maybe video source? Maybe Set up rails API and React-Redux first? 

---------------
Awesome and explicit source for API Auth: https://www.pluralsight.com/guides/token-based-authentication-with-ruby-on-rails-5-api 
    -We need an accessible model.
    -A way of encoding and decoding JWT tokens must be implemented.
    -We need methods for checking if the user is authenticated.
    -Controllers for creating and logging in users are also necessary.
    -We need routes for creating users and logging them in and out.  

Singleton Class: 
    -a singleton class restricts the instantiation of a class to a single object, which comes in handy when only one object is needed to complete the tasks at hand.

Authentication:
    -simple_command gem 
    -Instead of using private controller methods, simple_command can be used. For more information about installation, check out the article simple_command.
---------------
Auth works! Tested with user and got back a token!! 

In Rails 5, instead of having modules inhereit from ACtiveREcord::Base 'self.abstract_class = true' is added to ApplicationController. Now, the other modules will simply inhereit from ApplicationController. 
    -https://blog.bigbinary.com/2015/12/28/application-record-in-rails-5.html

Cant run Rails commands in terminal; saying Rails is not installed in system. Ran 'sudo gem install rails'.

-> Need to update Ruby version on Mac. 
    -https://stackoverflow.com/questions/38194032/how-to-update-ruby-version-2-0-0-to-the-latest-version-in-mac-osx-yosemite
        -> First answer will show you how to update Ruby via RVM.
Install ruby 2.6+ 
-> cant install with 'bundle i', need to ensure pg is isntaled before bundle
-will try this next:  https://wikimatze.de/installing-postgresql-gem-under-ubuntu-and-mac/

seems to be the way pg was installed and setup
https://blog.f5.works/issue-during-gem-install-pg-with-postgresapp/
---------------

CORS : https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS

rails c not working, fix: -> ln -s /usr/local/opt/readline/lib/libreadline.8.0.dylib /usr/local/opt/readline/lib/libreadline.7.dylib

---------------

cant view a users todos? getting unauthroized.

-> need to create a sessions contorller and have app run a function to check which suer is currently logged in. 
-> https://medium.com/@wintermeyer/authentication-from-scratch-with-rails-5-2-92d8676f6836

sessions will save user info so that user can stay logged in to application, we need to ensure no overlap between code written in RAils app thus far and the one we want to write for sessions. 
---------------

Not giving up on this idea; we can make it come to fruition. 
excellent read on the subject -> https://medium.com/@sherryhsu/session-vs-token-based-authentication-11a6c5ac45e4 


Sessions: 

bascially sesssion based authentication creates a session on the server-side and sends along a session_id on a cookie on the users' browser. Whiel the user stays logged the cookier would be sent along with every subsequent request. The server can then compare the session id stored on the cookie against the session information stored in the memory to verify user’s identity and sends response with the corresponding state!

vs. 

Tokens: jwt

the server creates JWT with a secret and sends the JWT to the client. The client stores the JWT (usually in local storage) and includes JWT in the header with every request. The server would then validate the JWT with every request from the client and sends response.
----------------
Scalability:

Session based authentication: Because the sessions are stored in the server’s memory, scaling becomes an issue when there is a huge number of users using the system at once.

Token based authentication: There is no issue with scaling because token is stored on the client side.